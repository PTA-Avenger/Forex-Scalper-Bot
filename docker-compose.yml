version: '3.8'

services:
  # C++ Trading Engine
  cpp-engine:
    build:
      context: .
      dockerfile: ./cpp/Dockerfile
      target: production
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - INFLUX_HOST=influxdb
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Price Predictor Service
  price-predictor:
    build:
      context: ./python/price_predictor
      dockerfile: Dockerfile
      target: production
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./logs:/app/logs
    ports:
      - "5001:5001"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Sentiment Analyzer Service
  sentiment-analyzer:
    build:
      context: ./python/sentiment_analyzer
      dockerfile: Dockerfile
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - REDIS_HOST=redis
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
    volumes:
      - ./python/sentiment_analyzer/models:/app/models
      - ./logs:/app/logs
    ports:
      - "5002:5002"
    depends_on:
      - redis
    networks:
      - forex-network
    restart: unless-stopped

  # FXCM Trading Service
  fxcm-service:
    build:
      context: ./python/fxcm_service
      dockerfile: Dockerfile
      target: production
    environment:
      - ENVIRONMENT=production
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - FXCM_ACCESS_TOKEN=${FXCM_ACCESS_TOKEN}
      - FXCM_SERVER_TYPE=${FXCM_SERVER_TYPE}
      - WEBHOOK_URL=http://cpp-engine:8080/webhook/fxcm
    volumes:
      - ./logs:/app/logs
    ports:
      - "5004:5003"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Signal Processor Service
  signal-processor:
    build:
      context: ./python/signal_processor
      dockerfile: Dockerfile
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
    ports:
      - "5003:5003"
    depends_on:
      - redis
      - postgres
    networks:
      - forex-network
    restart: unless-stopped

  # React Dashboard
  react-dashboard:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - NGINX_PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      cpp-engine:
        condition: service_healthy
      price-predictor:
        condition: service_healthy
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # TradingView Webhook Server
  tradingview-webhook:
    build:
      context: ./webhook
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=development
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - CPP_ENGINE_URL=http://cpp-engine:8080
    ports:
      - "8081:8081"
    networks:
      - forex-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=forex_bot
      - POSTGRES_USER=forex_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-forex_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U forex_user -d forex_bot"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # InfluxDB Time Series Database
  influxdb:
    image: influxdb:2.7-alpine
    environment:
      - INFLUXDB_DB=market_data
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD:-admin_password}
    volumes:
      - influx-data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - forex-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - forex-network
    restart: unless-stopped

  # NGINX Load Balancer (Development)
  nginx:
    image: nginx:alpine
    volumes:
      - ./docker/nginx/nginx.dev.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - cpp-engine
      - react-dashboard
      - price-predictor
      - sentiment-analyzer
    networks:
      - forex-network
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:
  influx-data:
  prometheus-data:
  grafana-data:

networks:
  forex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16