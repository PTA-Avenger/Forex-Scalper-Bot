services:
  # Price Predictor Service - Receives MT5 signals and processes with AI
  price-predictor:
    build:
      context: ./python/price_predictor
      dockerfile: Dockerfile
      target: production
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN:-forex-super-secret-token-12345}
      - INFLUXDB_ORG=forex-trading-org
      - INFLUXDB_BUCKET=market-data
    volumes:
      - ./logs:/app/logs
    ports:
      - "5001:5000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # MT5 Bridge Service - Receives signals from Windows VM
  mt5-bridge:
    build:
      context: ./python/mt5_bridge
      dockerfile: Dockerfile
    container_name: forex-mt5-bridge
    environment:
      - MT5_BRIDGE_HOST=0.0.0.0
      - MT5_BRIDGE_PORT=5000
      - PRICE_PREDICTOR_URL=http://price-predictor:5000
    volumes:
      - ./logs:/app/logs
    ports:
      - "5005:5000"
    depends_on:
      - price-predictor
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Redis Cache - For temporary data storage
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # PostgreSQL Database - For application data
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=forex_bot
      - POSTGRES_USER=forex_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-forex_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U forex_user -d forex_bot"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # InfluxDB Time Series Database - For market data and AI decisions
  influxdb:
    image: influxdb:2.7
    container_name: forex-influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD:-trading_password_123}
      - DOCKER_INFLUXDB_INIT_ORG=forex-trading-org
      - DOCKER_INFLUXDB_INIT_BUCKET=market-data
      - DOCKER_INFLUXDB_INIT_RETENTION=30d
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN:-forex-super-secret-token-12345}
    volumes:
      - influx-data:/var/lib/influxdb2
      - influx-config:/etc/influxdb2
    ports:
      - "8087:8086"
    networks:
      - forex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

volumes:
  redis-data:
  postgres-data:
  influx-data:
  influx-config:

networks:
  forex-network:
    driver: bridge